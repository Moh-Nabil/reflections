What happens when you initialize a repository? Why do you need to do it?
	
	.git file is added to start holding the history of the repository, no new commits
	will be added automatically. We do that so we can start saving the history of the
	files and keep track of them.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

	I think it acts more like a buffer area, where I can do initial commits, or
	initial additions before finally adding to the repository. It is an extra layer
	of protection for committing wrong things or without thinking, or to collect
	multiple files but on several stages.

How can you use the staging area to make sure you have one commit per logical
change?
	
	When changing anything, I will add it to the staging area, to make sure I don't
	lose track of anything, before committing I will make sure that every file that
	is going to be committed and every change going to be commited is related to the
	issue or feature I was working on.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
	
	Working on parallel ideas in the same time, without changing the original code,
	jumping from one branch to another without the need to have a direct relation between
	them. When adding new features in the same time we could us different branches to 
	implement such an idea.

How do the diagrams help you visualize the branch structure?

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?
